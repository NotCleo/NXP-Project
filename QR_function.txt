def camera_image_callback(self, message):
	"""Callback function to handle incoming camera images.

	Args:
		message: ROS2 message of the type sensor_msgs.msg.CompressedImage.

	Returns:
		None
	"""
	# These two lines converts the ROS image to OpenCV image 
	np_arr = np.frombuffer(message.data, np.uint8)
	image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

	# This below line does the Detection first
	qr_detector = cv2.QRCodeDetector()

	# This below line does the decoding after detection (qr_detector)
	data, points, _ = qr_detector.detectAndDecode(image)

	if data:
		self.qr_code_str = data
		self.get_logger().info(f"QR Code Data: {data}")

		# ignore this for now
		'''if points is not None:
			points = points.astype(int)
			for i in range(len(points[0])):
				pt1 = tuple(points[0][i])
				pt2 = tuple(points[0][(i + 1) % len(points[0])])
				cv2.line(image, pt1, pt2, color=(0, 255, 0), thickness=3)'''

	# Annotated image for visualization on foxglove
	self.publish_debug_image(self.publisher_qr_decode, image)
